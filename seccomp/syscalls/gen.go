//go:build ignore
// +build ignore

// This program generates syscalls.go. It can be invoked by running
// go generate
package main

import (
	"bufio"
	"fmt"
	"html/template"
	"log"
	"net/http"
	"os"
	"strconv"
	"strings"
	"time"
)

const (
	sys32bitURL = "https://raw.githubusercontent.com/torvalds/linux/master/arch/x86/entry/syscalls/syscall_32.tbl"
	sys64bitURL = "https://raw.githubusercontent.com/torvalds/linux/master/arch/x86/entry/syscalls/syscall_64.tbl"
)

func main() {
	var parts []string

	scs64Bit := map[int]string{}
	scs32Bit := map[int]string{}

	// crawl - 64 Bit syscalss
	rsp, err := http.Get(sys64bitURL)
	if err != nil {
		log.Fatal(err)
	}
	defer rsp.Body.Close()

	sc := bufio.NewScanner(rsp.Body)
	for sc.Scan() {
		if !strings.HasPrefix(sc.Text(), "#") {
			parts = strings.Fields(sc.Text())
			if len(parts) > 2 {
				i, _ := strconv.Atoi(parts[0])
				scs64Bit[i] = parts[2]
			}
		}
	}

	if err := sc.Err(); err != nil {
		fmt.Fprintln(os.Stderr, "reading response body:", err)
	}

	// crawl - 32 Bit syscalss
	rsp, err = http.Get(sys32bitURL)
	if err != nil {
		log.Fatal(err)
	}
	defer rsp.Body.Close()

	sc = bufio.NewScanner(rsp.Body)
	for sc.Scan() {
		if !strings.HasPrefix(sc.Text(), "#") {
			parts = strings.Fields(sc.Text())
			if len(parts) > 2 {
				i, _ := strconv.Atoi(parts[0])
				scs32Bit[i] = parts[2]
			}
		}
	}

	if err := sc.Err(); err != nil {
		fmt.Fprintln(os.Stderr, "reading response body:", err)
	}

	f, err := os.Create("syscalls.go")
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	syscallTemplate.Execute(f, struct {
		Timestamp     string
		URL64Bit      string
		URL32Bit      string
		Syscalls64Bit map[int]string
		Syscalls32Bit map[int]string
	}{
		Timestamp:     time.Now().Format("2006-01-02"),
		URL64Bit:      sys64bitURL,
		URL32Bit:      sys32bitURL,
		Syscalls64Bit: scs64Bit,
		Syscalls32Bit: scs32Bit,
	})
}

var syscallTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots on {{ .Timestamp }}
// using data from:
// - {{ .URL64Bit }}
// - {{ .URL32Bit }}

package syscalls

var Syscalls64Bit = map[int]string{
{{- range $key, $value := .Syscalls64Bit }}
	{{ $key }}: "{{ $value }}",
{{- end }}
}

var Syscalls32Bit = map[int]string{
{{- range $key, $value := .Syscalls32Bit }}
	{{ $key }}: "{{ $value }}",
{{- end }}
}

// IsValid checks if string is a valid 64bit or 32bit linux syscall
func IsValid(syscall string) bool {
	for _, ele := range Syscalls64Bit {
		if ele == syscall {
			return true
		}
	}
	for _, ele := range Syscalls32Bit {
		if ele == syscall {
			return true
		}
	}
	return false
}

// IsValidByNumber checks if number is a valid 64bit or 32bit linux syscall
func IsValidByNumber(syscall int) (string, bool) {
	if sc, ok := Syscalls64Bit[syscall]; ok {
		return sc, true
	}
	if sc, ok := Syscalls32Bit[syscall]; ok {
		return sc, true
	}
	return "", false
}
`))
